%%%%%%%%%
%%%
%%%  EXAMPLE 3:
%%%  Symmetric change of measure with Gaussians.
%%%
%%% Toni Karvonen, 2018
%%%
%%%%%%%%%

  clear all
  close all
  
  % Addpaths
  addpath('../functions/')
  
  % Integrand, measure and kernel
  d  = 8;
  
  mu = linspace(0.1,1,d)';
  S  = [eye(d/2) zeros(d/2,d/2); zeros(d/2,d/2) 1.5*eye(d/2)];
  S(1,4) = 0.3; S(4,1) = 0.3;
  S(2,7) = 0.5; S(7,2) = 0.5;
  S = 0.5*S;
  invS = inv(S);
  norS = det(2*pi*S)^(-0.5);
  
  L     = [0.8*eye(d/2) zeros(d/2,d/2); zeros(d/2,d/2) 1.1*eye(d/2)]^2;
  invL  = inv(L);
  muf   = linspace(0.2,0.5,d)';
  f     = @(x) exp(-0.5*(x(:)-muf)'*invL*(x(:)-muf));
  If    = det(L*inv(S+L))^0.5 * exp(-0.5*(muf-mu)'*inv(S+L)*(muf-mu));
  p     = @(x) norS * exp(-0.5*(x(:)-mu)'*invS*(x(:)-mu));
  p_is  = @(x) (2*pi)^(-d/2) * exp(-0.5*sum(x.^2));
  f_is  = @(x) f(x)*p(x)/p_is(x);
  
  l = 0.8;
  [k kmean Ikmean] = kq_kernel('gauss', l, d, 'normal');
  
  % Use fully symmetric Bayesian cubature with a Gauss-Hermite sparse grid
  
  Qs = [];
  Ns = [];
  rel_errs = [];
  q_max = 11;
  qs = 1:q_max;
  
  for q = 1:q_max;
    
    % Generate the sparse grid
    XS = gh_seq(q);
    us = sparse_gens(XS, d);
    us = us(:,2:end); % We do not want the central point
    [Us Ls] = fss_gen(us, d);
    
    % Integrand evaluations
    Y = funceval(f_is,cell2mat(Us));

    % Sparse grid kernel quadrature
    [Q, wce, wr] = kq_fss(Y, Us, k, kmean, Ikmean, 'true');
    Qs = [Qs Q];
    N = sum(Ls);
    Ns = [Ns N];
    rel_errs = [rel_errs abs((Q-If)/If)];

    % Print profress
    fprintf('q = %i/%i\n', q, q_max);
    
  end
  
  % Plot
  loglog(Ns,rel_errs,'LineWidth',1.5)
  title('Relative integration error')
