function [mus, vs, W] = bc_multi(k_mo, km_mo, kmm_mo, Xs, Y)
% BC_MULTI - Generic multi-output Bayesian cubature
%
%   Computes integrals of D related functions using the method from
%
%     Xi, Briol, Girolami (2018). Bayesian Quadrature for Multiple Related Integrals. ICML 2018.
%   
%   This is a generic and computationally inefficient function: structural properties of 
%   the kernel or the point sets are not exploited in any way.
%
% INPUT
%   - k_mo      Multi-output kernel. Given two vectors x and y, k(x,y) returns 
%               a (D x D) matrix.
%   - km_mo     Multi-output kernel mean. Given a vector x, returns a (D x D) matrix.
%   - kmm_mo    Integral of the kernel mean, (D x D) matrix.
%   - Xs        A cell array of evaluation points for each of the D integrands.
%               Xs{d}(:,i) must be the i-th evaluation point for the d-th integrand.
%   - Y         A column vector of integrand evaluations, ordered to be "compatible"
%               with Xs.
%
% OUTPUT
%   - mus       Estimates of the D integrals, (D x 1) matrix.
%   - vs        Integral variance, (D x D) matrix.
%   - W         The multi-output Bayesian cubature weights, (N_total x D) matrix,
%               N_total being the total number of evaluation points in Xs.

% Toni Karvonen, 2018
  
  % Extract basic parameters
  D = length(Xs);
  Ns = zeros(1,D);
  for n = 1:D
    Ns(n) = size(Xs{n},2);
  end
  N_sum = sum(Ns);
  
  K   = zeros(N_sum, N_sum);
  kmv = zeros(N_sum, D);
  for n = 1:D
    for m = 1:D
      for nn = 1:Ns(n)
        x1 = Xs{n}(:,nn);
        % Multi-output kernel matrix
        for mm = 1:Ns(m)
          x2 = Xs{m}(:,mm);
          c = k_mo(x1,x2);
          K(sum(Ns(1:n-1))+nn,sum(Ns(1:m-1))+mm) = c(n,m);
        end
        % Multi-output kernel mean "vector"
        c_km = km_mo(x1);
        kmv(sum(Ns(1:n-1))+nn,m) = c_km(n,m);
      end
    end
  end
  
  % Solve the weight matrix and compute the integral estimates and their variance
  W   = K\kmv;
  mus = W'*Y;
  vs  = kmm_mo - W'*kmv;
  
end
