function [mu s] = bs_cuba(Y, X, dist, k, kmean, Ikmean, isotropic, m)
% BS_CUBA - Compute Bayes-Sard cubature integral mean and variance
%
%   Given n data locations X (d x n) and data values Y (1 x n),
%   returns the Bayes-Sard posterior mean mu and variance s
%   when pi is the full polynomial space of degree m.
%
% INPUT
%   - X             data locations (d x n)
%   - Y             data values    (1 x n)
%   - dist          integration distribution, options:
%                     'uniform' - uniform distribution on the hypercube [0,1]^d (default input)
%                     'normal'  - standard Gaussian distribution on R^d
%   - k             positive-definite kernel
%   - kmean         kernel mean, given as kmean(x)
%   - Ikmean        integrated kernel mean (i.e. initial WCE)
%   - isotropic     TRUE for isotropic (default), FALSE for not isotropic
%   - m             degree of the polynomial space pi (must have dim(pi) <= n)
%
% OUTPUT
%   - mu            Bayes-Sard integral posterior mean
%   - s             Bayes-Sard integral posterior variance

% Toni Karvonen, 2018
  
  if ~exist('isotropic', 'var')
    isotropic = true;
  end

  if ~exist('dist', 'var')
    dist = 'uniform';
  end
  
  Y = Y(:);
  
  n = size(X,2);          % Number of points
  d = size(X,1);          % Space dimension
  Q = nchoosek(m+d,d);    % Dimension of the polynomial space
  
  % Solve the weights
  K = kmat(X, k, isotropic);
  Ik = zeros(n, 1);
  for i = 1:n
    Ik(i) = kmean(X(:,i));
  end
  [P Ip] = vandermonde(m, X, dist);
  KP = [K P; P' zeros(Q, Q)];
  ww = KP \ [Ik; Ip];
  wk = ww(1:n);
  wpi = ww(n+1:end);
  
  % Compute the integral estimate and its variance
  mu = Y' * wk;
  % This is not computationally optimal as we have to do inv(K) again,
  % we have inverted KP already, after all.
  tmp = K \ Ik;
  s  = Ikmean - Ik'*tmp + (P'*tmp - Ip)'*wpi;
  
end
