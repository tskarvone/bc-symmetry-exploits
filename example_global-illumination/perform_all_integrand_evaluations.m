function [f,G,X,B] = perform_all_integrand_evaluations(ang,n_gen,col)
% Inputs:
% ang = 1 x n_int vector of angles in [0,2*pi) that defines the set of 
%       n_int different integrand(s) to be evaluated
% n = number of generator vectors to be used
% col = number in {1,2,3} controlling which RGB channel is used
% Outputs:
% f = n_int x n array
% f(i,j) = evaluation of the ith integrand on the jth point
% G = 3 x n_gen array
% G(:,j) = the jth generator vector
% X = 1 x n_gen cell array
% X{i} = 3 x ni array
% X{i}(:,j) = the jth point generated by the generator i
% B = n_int x n_int covariance matrix
% B(i,j) = exp( < omega_o(:,i) , omega_o(:,j) > - 1 )

% define the collection of integrands
% these are indexed by a vector omega_o in S^2, representing the viewing 
% angle of the observer
n_int = length(ang); % number of integrands
if sum((ang<0) + (ang >= 2*pi)) > 0
    error('Angles must be in [0,2*pi).')
end
omega_o = zeros(3,n_int); 
azimuth = 0; % in [0,2pi]
elevation = ang; % in [0,2pi]
for i = 1:n_int
    [x,y,z] = sph2cart(azimuth,elevation(i),1); % direction to look in
    omega_o(:,i) = [x,y,z]';
end

% compute the covariance matrix B
% this uses the same covariance function as in Xi et al, ICML 2018
B = zeros(n_int,n_int);
for i = 1:n_int
    for j = 1:n_int
        B(i,j) = exp(omega_o(:,i)' * omega_o(:,j) - 1);
    end
end

% import generator vectors
% source: http://web.maths.unsw.edu.au/~rsw/Sphere/
cd('point_sets')
filename = ['points',num2str(n_gen,'%u'),'.csv'];
if exist(filename,'file') == 2
    out = csvread(filename,1,0);
else
    error(['There is no file called point_sets/',filename,' to import.'])
end
G = out(:,1:3)';
cd('../')

% construct the fully symmetric point set, based on the generators in G
X = fss_gen(G,3);
X_mat = cell2mat(X); % re-format as a regular array
n = size(X_mat,2); % total number of points

% load an environment map
envMap = hdrread('envMaps/Mono_Lake_B_Env.hdr');

% evaluate integrand(s)
f = zeros(n_int,n);
for i = 1:n_int % the ith integrand
    for j = 1:n % the jth point
        omega_i = X_mat(:,j);
        fval = integrand(omega_i,omega_o(:,i),envMap);
        f(i,j) = fval(col); % read off the desired color channel
    end
end

end





